
////////////////////////////////////////////////////////////////////////////////
//                                                                            
//   File Name:   Setup.rul                                                   
//                                                                            
//   Description: InstallShield script                                        
//                                                                            
//   Comments:    This script was generated based on the selections you made in
//                the Project Wizard.  Refer to the help topic entitled "Modify      
//                the script that the Project Wizard generates" for information
//                on possible next steps.
//
////////////////////////////////////////////////////////////////////////////////


// Include header files
    
#include "ifx.h"
    
////////////////////// string defines ////////////////////////////

//////////////////// installation declarations ///////////////////

// ----- DLL function prototypes -----


    // your DLL function prototypes


// ---- script function prototypes -----


    // your script function prototypes

    // your global variables
    BOOL   g_bModifyPath;
    BOOL   g_bPATHModified;
    NUMBER g_nMaintenanceType;  // value returned from SdWelcomeMaint
                                // valid only when MAINTENANCE = TRUE
                                
    BOOL   g_bRC1Hack;
    STRING g_svRC1HackPath;



//////////////////////////////////////////////////////////////////////////////
//                                                                           
//  FUNCTION:   OnFirstUIBefore                                            
//                                                                           
//  EVENT:      FirstUIBefore event is sent when installation is run for the first
//              time on given machine. In the handler installation usually displays
//              UI allowing end user to specify installation parameters. After this
//              function returns, ComponentTransferData is called to perform file
//              transfer.
//                                                                           
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIBefore()
    number  nResult;
    string  szTitle, szMsg;
    string  szLicenseFile, szQuestion;
    string  szTargetPath;
    string  szDir;
    string  szComponents, szTargetdir;
    number  nLevel;
    LIST    listStartCopy;
    number  nvSize, nSetupType;
    //{{
    string szSaveMedia;
    //}}
    
begin	
    // TO DO: if you want to enable background, window title, and caption bar title                                                                     
    // SetTitle( @TITLE_MAIN, 24, WHITE );                                        
    // SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION ); 	                   
    // Enable( FULLWINDOWMODE );						   
    // Enable( BACKGROUND );							  
    // SetColor( BACKGROUND, RGB( 0, 128, 128 ) );					   
   
    nSetupType = TYPICAL;	
    TARGETDIR = PROGRAMFILES ^ @COMPANY_NAME ^ @INSTALL_DIR;	
    szDir = TARGETDIR;
    //{{
    g_bModifyPath = TRUE;
    //}}

Dlg_Start:
    // beginning of dialogs label

Dlg_SdWelcome:
    szTitle = "Welcome to the %P InstallShield Wizard";
    szMsg = "";
    nResult = SdWelcome( szTitle, szMsg );
    if (nResult = BACK) goto Dlg_Start;

Dlg_SdLicense:
    szLicenseFile = SUPPORTDIR ^ "NOTICE.TXT";
    szTitle = "User Rights Notice";
    szMsg = "Please read the following notice carefully.";
    szQuestion = "Do you accept all the terms of the above notice?  If you choose No, Setup will close.  To install %P, you must accept all the terms of the above notice.";
    nResult = SdLicense( szTitle, szMsg, szQuestion, szLicenseFile );
    if (nResult = BACK) goto Dlg_SdWelcome;

Dlg_SdAskDestPath:
    szTitle = "";
    szMsg = "";
    nResult = SdAskDestPath( szTitle, szMsg, szDir, 0 );
    TARGETDIR = szDir;
    if (nResult = BACK) goto Dlg_SdLicense;
    
Dlg_SetupType:   
    szTitle = "";
    szMsg = "";
    nResult = SetupType ( szTitle, szMsg, "", nSetupType, 0 );
    if (nResult = BACK) then
        goto Dlg_SdAskDestPath;
    else
        nSetupType = nResult;
        if (nSetupType != CUSTOM) then
            szTargetPath = TARGETDIR;
            nvSize = 0;
            ComponentCompareSizeRequired( MEDIA, szTargetPath, nvSize );
            if (nvSize != 0) then      
                MessageBox( szSdStr_NotEnoughSpace, WARNING );
                goto Dlg_SetupType;
            endif;
        endif;   
    endif;


Dlg_SdComponentTree: 
    if ((nResult = BACK) && (nSetupType != CUSTOM)) goto Dlg_SetupType;
    szTitle = "";
    szMsg = "";
    szTargetdir = TARGETDIR;
    szComponents = "";
    nLevel = 2;
    if (nSetupType = CUSTOM) then
        nResult = SdComponentTree( szTitle, szMsg, szTargetdir, szComponents, nLevel );
        if (nResult = BACK) goto Dlg_SetupType;  
    endif;

Dlg_ObjDialogs:
    nResult = ShowObjWizardPages( nResult );
    if (nResult = BACK) goto Dlg_SdComponentTree;

//{{
Dlg_SdAskOptions:
    if (ComponentIsItemSelected( MEDIA, "Program Files" ) = TRUE) then
        // Save MEDIA
        szSaveMedia = MEDIA;
        MEDIA = "ModifyPath";
        
        // Create script-created component set
        ComponentAddItem( MEDIA, "Yes", 0, TRUE );
        ComponentAddItem( MEDIA, "No",  0, FALSE );    
        
        szTitle = "Environment settings";
        szMsg = "Would you like Setup to modify the PATH environment variable so that %P can be run from any directory?";
        nResult = SdAskOptions( szTitle, szMsg, "", "", "", EXCLUSIVE );
    
        if (ComponentIsItemSelected( MEDIA, "No" ) = TRUE) then
            g_bModifyPath = FALSE;
        endif;
        // restore MEDIA
        MEDIA = szSaveMedia;
    endif;    	
    if (nResult = BACK) goto Dlg_ObjDialogs;
//}}

Dlg_SdStartCopy:
    szTitle = "";
    szMsg = "";
    listStartCopy = ListCreate( STRINGLIST );
    //The following is an example of how to add a string (szName) to a list (listStartCopy).
    //e.g. ListAddString( listStartCopy, szName, AFTER );
    //{{
    // Lines 1 & 2
    ListAddString(listStartCopy, "Destination Folder for installation:", AFTER);
    ListAddString(listStartCopy, @INDENT_SPACES + TARGETDIR, AFTER);

    // Lines 3 & 4
    ListAddString(listStartCopy, "Setup Type:", AFTER);
    if (nSetupType = TYPICAL) then
        ListAddString(listStartCopy, @INDENT_SPACES + "Typical", AFTER);
    elseif (nSetupType = CUSTOM) then
        ListAddString(listStartCopy, @INDENT_SPACES + "Custom", AFTER);
    elseif (nSetupType = COMPACT) then
        ListAddString(listStartCopy, @INDENT_SPACES + "Compact", AFTER);
    endif;

    // Lines 5 & 6
    if (ComponentIsItemSelected( MEDIA, "Program Files" ) = TRUE) then
        ListAddString(listStartCopy, "Modify PATH to run " + @TITLE_MAIN + " from any directory?", AFTER);
        if (g_bModifyPath = TRUE) then
            ListAddString(listStartCopy, @INDENT_SPACES + "Yes", AFTER);
        else
            ListAddString(listStartCopy, @INDENT_SPACES + "No", AFTER);
        endif;	
    endif;
    //}}

    nResult = SdStartCopy( szTitle, szMsg, listStartCopy );	
    ListDestroy( listStartCopy );
    if (nResult = BACK) goto Dlg_SdAskOptions;

    // set up default status
    SetStatusWindow( 0, "" );
    Enable( STATUSEX );
    StatusUpdate( ON, 100 );

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnMoving
//
//  EVENT:      Moving event is sent when file transfer is started as a result of
//              ComponentTransferData call, before any file transfer operations 
//              are performed.
//
///////////////////////////////////////////////////////////////////////////////
function OnMoving()
    string szAppPath;
    //{{
    number nvType;
    string svValue;
    number nvSize;
    number nResult;
    string svErrorMessage;
    string szKey;
    //}}
begin
    // Set Logo Compliance Application Path 
    szAppPath = TARGETDIR ^ "bin";
    // DONE: if your application's main executable file is in a subfolder of TARGETDIR then append this subfolder to szAppPath 
    RegDBSetItem( REGDB_APPPATH, szAppPath );
    RegDBSetItem( REGDB_APPPATH_DEFAULT, szAppPath ^ @PRODUCT_KEY );
    
    if ( MAINTENANCE ) then
        //{{ BUG FIX(InstallShield Professional 6.31): for Windows 95
        if (SYSINFO.WIN9X.bWin95) then
            RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
            szKey = "SOFTWARE" ^ @COMPANY_NAME ^ @PRODUCT_NAME ^ @PRODUCT_VERSION;            
            if (RegDBGetKeyValueEx ( szKey, "PATHModified", nvType, svValue, nvSize) = 0 ) then
                g_bPATHModified = TRUE;
                // now manually remove it ALWAYS -- reset in ProgramFiles_Installed
                RegDBDeleteValue(szKey, "PATHModified");
            else
                g_bPATHModified = FALSE;            
            endif;
        //}} BUG FIX(InstallShield Professional 6.31): for Windows 95
        else
            // This key is removed by Uninstall (EXCEPT WHEN USED UNDER WINDOWS 95)
            nResult = RegDBGetAppInfo( "PATHModified", nvType, svValue, nvSize );
            if (nResult = 0) then
                g_bPATHModified = TRUE;
            else
                g_bPATHModified = FALSE;
            endif;
        endif;
    endif;
    
end;
 
//////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnBegin
//
//  EVENT:      Begin event is always sent as the first event during installation.
//
//////////////////////////////////////////////////////////////////////////////
function OnBegin()
	string svResult;
begin
    // TO DO: you may change default non-UI setting, for example
    //
    // Disable(SELFREGISTERBATCH)
    // SetInstallationInfo with arguments other then default
    //
    // You may also perform your custom initialization steps, check requirements, etc.
    //{{
    SdProductName( @TITLE_MAIN );
    g_bModifyPath = FALSE;    
    g_bPATHModified = FALSE;
    //{{
    g_bRC1Hack = FALSE;
    // Note: HACK for rc1 only -- added InstallLocation starting with rc2
    // see OnMoved and OnMoving 
    if (RegDBGetItem(REGDB_APPPATH, g_svRC1HackPath) == 0) then
	    if (FindFile(g_svRC1HackPath ^ "bin", "phast-ser-rc1.exe", svResult) == 0) then
            if (LongPathToShortPath(g_svRC1HackPath) == 0) then
                g_bRC1Hack = TRUE;
            endif;
        endif;
    endif;
    //}}
    //}}    
end;
 
///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnFirstUIAfter
//
//  EVENT:      FirstUIAfter event is sent after file transfer, when installation 
//              is run for the first time on given machine. In this event handler 
//              installation usually displays UI that will inform end user that
//              installation has been completed successfully.
//
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOption1, szOption2;
    NUMBER bOpt1, bOpt2;
    //{{
    #define APPLICATION WINDIR ^ "Notepad.exe"
    #define CMD_LINE TARGETDIR ^ "Readme.txt"
    number nReturn;
    string svResult;
    //}}
begin
    Disable(STATUSEX);

    ShowObjWizardPages(NEXT);
    
    //{{
    if (FindFile(TARGETDIR, "Readme.txt", svResult) < 0) then
	    bOpt1     = FALSE;
        szMsg1    = SdLoadString(IFX_SDFINISH_MSG1);
    else
        bOpt1     = TRUE;
        szMsg1    = "Setup can display the %P README file. Check or uncheck the option below.";        
        szOption1 = "Display the README file";
    endif;
    //}}
    
    bOpt2  = FALSE;
    nReturn = SdFinishEx(szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2);
    
    //{{
    if (nReturn = 0 && bOpt1) then
        if (LaunchApp(APPLICATION, CMD_LINE) < 0) then
            MessageBox ("Unable to launch " + APPLICATION + ".", SEVERE);
        endif;
    endif;
    //}}    
end; 
 
//////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnMoved
//
//  EVENT:      Moved event is sent when file transfer started by ComponentTransferData call
//              has finished. At this point all file transfer operations are completed 
//              except for batch self-registration which is performed immediately after this
//              function returns. During uninstallation this event sent after uninstallation
//              is completed. For that reason you should not modify system state in this
//              event handler.
//
///////////////////////////////////////////////////////////////////////////////
function OnMoved()
    string sKey;
    string svResult;
begin
    //{{    
    if (!MAINTENANCE || g_nMaintenanceType != REMOVEALL) then
        // rename default uninstall name displayed in install/uninstall programs applet
        // for all OS
        RegDBSetItem( REGDB_UNINSTALL_NAME, @TITLE_MAIN );
        
        // Set the InstallLocation value in the uninstall key. 
        // for all OS
        sKey = "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\" + PRODUCT_GUID;
        RegDBSetDefaultRoot( HKEY_LOCAL_MACHINE );
        RegDBSetKeyValueEx( sKey, "InstallLocation" , REGDB_STRING, TARGETDIR, -1 );
        
        // add additional uninstall information
        // for 2000 and XP
        if (SYSINFO.WINNT.bWin2000 || SYSINFO.WINNT.bWinXP || SYSINFO.WIN9X.bWinMe) then
        	// Set sKey to be the uninstall key for this product
        	sKey = "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\" + PRODUCT_GUID;
            /*****
        	RegDBSetDefaultRoot( HKEY_LOCAL_MACHINE );    
        	
        	// Publisher: This specifies your company name or whomever distributed the application. 
        	RegDBSetKeyValueEx( sKey, "Publisher" , REGDB_STRING, @UNINST_PUBLISHER, -1 );
        	
            // DisplayVersion: This contains a string containing the version you want displayed. 
        	RegDBSetKeyValueEx( sKey, "DisplayVersion" , REGDB_STRING, @PRODUCT_VERSION, -1 );
            
            // DisplayVersion: This contains a string containing the version you want displayed. 
        	RegDBSetKeyValueEx( sKey, "HelpLink" , REGDB_STRING_EXPAND, @UNINST_HELPLINK, -1 );
        	
        	// ReadMe: You can specify a link in this registry value that will point to a site on the web with the ReadMe for your product.
        	RegDBSetKeyValueEx( sKey, "ReadMe" , REGDB_STRING_EXPAND, @UNINST_README, -1 );
        	
            // Comments: This value contains any comment about your product you want to include. For example, it could be a short description of what your product does.        	
        	RegDBSetKeyValueEx( sKey, "Comments" , REGDB_STRING, @UNINST_COMMENTS, -1 );
        	*****/
        endif;
    endif;
    //}}    
end;
 
///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnMaintUIBefore
//
//  EVENT:      MaintUIBefore event is sent when end user runs installation that
//              has already been installed on the machine. Usually this happens 
//              through Add/Remove Programs applet. In the handler installation 
//              usually displays UI allowing end user to modify existing installation
//              or uninstall application. After this function returns, 
//              ComponentTransferData is called to perform file transfer.
//
///////////////////////////////////////////////////////////////////////////////
function OnMaintUIBefore()
    NUMBER nResult, nType;
    STRING szTitle, szMsg, svDir, svResult, szCaption;
begin
	// TO DO: if you want to enable background, window title, and caption bar title   								
	// SetTitle( @TITLE_MAIN, 24, WHITE );					
	// SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION );  			
	// SetColor(BACKGROUND,RGB (0, 128, 128));					
	// Enable( FULLWINDOWMODE );						
	// Enable( BACKGROUND );							

Dlg_Start:
	Disable(BACKBUTTON);
	nType = SdWelcomeMaint(szTitle, szMsg, MODIFY);
	Enable(BACKBUTTON);
	
	//{{
	g_nMaintenanceType = nType;
	//}}
	
    if (nType = REMOVEALL) then
		svResult = SdLoadString(IFX_MAINTUI_MSG);
		szCaption = SdLoadString(IFX_ONMAINTUI_CAPTION);
		nResult = SprintfBox(MB_OKCANCEL,szCaption,"%s",svResult);
		if (nResult = IDCANCEL) goto Dlg_Start;
	endif;

    nResult = NEXT;

Dlg_SdComponentTree:
	if (nType = MODIFY) then
		szTitle = "";
		szMsg = "";
		nResult = SdComponentTree(szTitle, szMsg, TARGETDIR, "", 2);
		if (nResult = BACK) goto Dlg_Start;
    endif;

Dlg_ObjDialogs:
    nResult = ShowObjWizardPages(nResult);
    if ((nResult = BACK) && (nType != MODIFY)) goto Dlg_Start;
    if ((nResult = BACK) && (nType = MODIFY)) goto Dlg_SdComponentTree;

	switch(nType)
        case REMOVEALL: ComponentRemoveAll();
        case REPAIR:    ComponentReinstall();
    endswitch;
    
    // setup default status 
 	SetStatusWindow(0, "");
	Enable(STATUSEX);
	StatusUpdate(ON, 100);
end;
 
// --- include script file section ---



#include "ComponentEvents.rul"