#define ALL_USER_KEY      "SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment"
#define CURRENT_USER_KEY  "Environment"
#define HWND_BROADCAST    0xffff
#define REM_BATCH         "REM Line immediately below added by " + @TITLE_MAIN
#define WIN_ME_KEY        "System\\CurrentControlSet\\Control\\SessionManager\\Environment"
#define WIN_ME_PATH       "PATH"
#define WIN_NT_PATH       "Path"
#define WM_SETTINGCHANGE  0x001A
#define HKEY_UNINSTALL    "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall"
#define INSTALLLOCATION   "InstallLocation"


prototype AddAutoExecPath(string);
prototype AddMEPath(string);
prototype AddNTPath(string);
prototype AddPath(string);
prototype BackupAutoexec();
prototype CheckForPreviousGUID(string, BYREF string);
prototype FindFirstPosition(string, BYREF number, BOOL, string);
prototype RemoveAutoExecPath(string);
prototype RemoveMEPath(string);
prototype RemoveNTPath(string);
prototype RemovePath(string);

//////////////////////////////////////////////////////////////////////////////
//
//  Function: AddAutoExecPath
//
//  Purpose: Add given path to %PATH% on 9x
//
///////////////////////////////////////////////////////////////////////////////

function AddAutoExecPath(szPathToAdd)
    string szNewPath;
    number nvFileHandle;
    string svFile;
    string svPath;
    string svFileName;
    string svPathToAdd;
begin
    svPathToAdd = szPathToAdd;
    if (LongPathToShortPath(svPathToAdd) < 0) then
        return FALSE;
    endif;    

    szNewPath = "SET PATH=%PATH%;" + svPathToAdd; 
    
    // Get the name of the bootup batch file.
    if (BatchGetFileName(svFileName) < 0) then
        return FALSE;
    endif;
    
    BackupAutoexec();
    
    if (ParsePath(svFile, svFileName, FILENAME) < 0) then
        return FALSE;
    endif;
    if (ParsePath(svPath, svFileName, PATH) < 0) then
        return FALSE;
    endif;
    
    if (OpenFileMode(FILE_MODE_APPEND) < 0) then
        return FALSE;
    endif;
    
    if (OpenFile(nvFileHandle, svPath, svFile) < 0) then
        return FALSE;        
    endif;
        
    // REM Line immediately below added by ...
    if (WriteLine(nvFileHandle, REM_BATCH) < 0) then
        return FALSE;        
    endif;        
    
    // SET PATH=%PATH%; ...
    if (WriteLine(nvFileHandle, szNewPath) < 0) then
        return FALSE;        
    endif;
    
    CloseFile(nvFileHandle); 
    return TRUE;
end;

//////////////////////////////////////////////////////////////////////////////
//
//  Function: AddMEPath
//
//  Purpose: Add given path to %PATH% on ME
//
///////////////////////////////////////////////////////////////////////////////

function AddMEPath(szPathToAdd)
    number nResult;         //
    string svPathToAdd;     //
    number nvType;          // registry key type
    string svCurrentPath;   //
    number nvSize;          //
    string szNewPath;       //
    string szEnv;           //
    pointer pEnv;           //    
    string szKey;
    number nPosFirst;
    number nPos;
    string svBeginPath;
    string svEndPath;
    BOOL bFoundRC1;         // RC1
    string svPathRC1;       // RC1
    BOOL bFoundRC2;         // RC2
    string svPathRC2;       // RC2
    BOOL bFoundRC3;         // RC3
    string svPathRC3;       // RC3
    BOOL bFound1_0;         // 1.0
    string svPath1_0;       // 1.0
    BOOL bFound1_1;         // 1.1
    string svPath1_1;       // 1.1
    BOOL bFound1_2;         // 1.2
    string svPath1_2;       // 1.2
    BOOL bFound1_2_1;       // 1.2.1
    string svPath1_2_1;     // 1.2.1
    BOOL bFound1_3;         // 1.3
    string svPath1_3;       // 1.3
    BOOL bFound1_3_1;       // 1.3.1
    string svPath1_3_1;     // 1.3.1
    BOOL bFound1_3_2;       // 1.3.2
    string svPath1_3_2;     // 1.3.2
    BOOL bFound1_3_3;       // 1.3.3
    string svPath1_3_3;     // 1.3.3
    BOOL bFound1_3_4;       // 1.3.4
    string svPath1_3_4;     // 1.3.4
    BOOL bFound1_4_2;       // 1.4.2
    string svPath1_4_2;     // 1.4.2
    BOOL bFound1_5_0;       // 1.5.0
    string svPath1_5_0;     // 1.5.0
    BOOL bFound1_5_1;       // 1.5.1
    string svPath1_5_1;     // 1.5.1
    //{{
    // ADD_NEW_VERSION_HERE
    // BOOL bFound1_6_0;       // 1.6.0
    // string svPath1_6_0;     // 1.6.0
    //}}
begin    
    if (!SYSINFO.WIN9X.bWinMe) then
        // bad OS
        return FALSE; // failure
    endif;

    //
    // check for previous versions
    //

    // check for RC1
    bFoundRC1 = CheckForPreviousGUID(@GUID_RC1, svPathRC1);

    // check for RC2
    bFoundRC2 = CheckForPreviousGUID(@GUID_RC2, svPathRC2);
    
    // check for RC3
    bFoundRC3 = CheckForPreviousGUID(@GUID_RC3, svPathRC3); 

    // check for 1.0
    bFound1_0 = CheckForPreviousGUID(@GUID_1_0, svPath1_0);	

    // check for 1.1
    bFound1_1 = CheckForPreviousGUID(@GUID_1_1, svPath1_1);	

    // check for 1.2
    bFound1_2 = CheckForPreviousGUID(@GUID_1_2, svPath1_2);	

    // check for 1.2.1
    bFound1_2_1 = CheckForPreviousGUID(@GUID_1_2_1, svPath1_2_1);	
    
    // check for 1.3
    bFound1_3 = CheckForPreviousGUID(@GUID_1_3, svPath1_3);	
    
    // check for 1.3.1
    bFound1_3_1 = CheckForPreviousGUID(@GUID_1_3_1, svPath1_3_1);	
    
    // check for 1.3.2
    bFound1_3_2 = CheckForPreviousGUID(@GUID_1_3_2, svPath1_3_2);	
    
    // check for 1.3.3
    bFound1_3_3 = CheckForPreviousGUID(@GUID_1_3_3, svPath1_3_3);	

    // check for 1.3.4
    bFound1_3_4 = CheckForPreviousGUID(@GUID_1_3_4, svPath1_3_4);	

    // check for 1.4.2
    bFound1_4_2 = CheckForPreviousGUID(@GUID_1_4_2, svPath1_4_2);	
    
    // check for 1.5.0
    bFound1_5_0 = CheckForPreviousGUID(@GUID_1_5_0, svPath1_5_0);	

    // check for 1.5.1
    bFound1_5_1 = CheckForPreviousGUID(@GUID_1_5_1, svPath1_5_1);
    
    //{{
    // ADD_NEW_VERSION_HERE
    // check for 1.6.0
    // bFound1_6_0 = CheckForPreviousGUID(@GUID_1_6_0, svPath1_6_0);
    //}}
    
    svPathToAdd = szPathToAdd;
    if (LongPathToShortPath(svPathToAdd) < 0) then
        // bad path
        return FALSE; // failure    
    endif;    
    
    if (RegDBSetDefaultRoot( HKEY_LOCAL_MACHINE ) < 0) then
        // can't set root
        return FALSE; // failure
    endif;    
    
    // check to see if svPathToAdd is already in path
    nResult = RegDBGetKeyValueEx(WIN_ME_KEY, WIN_ME_PATH, nvType, svCurrentPath, nvSize);    
    
    if ( nResult < 0 ) then
        // WIN_ME_PATH not found
        return FALSE;
    else
        if ( StrFind(svCurrentPath, svPathToAdd) < 0 ) then
            // not found add it to path

            // check if previous versions are in path
            nPosFirst = StrLength( svCurrentPath ); 

            // RC1
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFoundRC1, svPathRC1);

            // RC2
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFoundRC2, svPathRC2);

            // RC3
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFoundRC3, svPathRC3);

            // 1.0 -- Note: The next line was commented out as of 9/27/05 but has been
            //              re-added as of version 1.1
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_0, svPath1_0);
            
            // 1.1
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_1, svPath1_1);

            // 1.2
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_2, svPath1_2);
            
            // 1.2.1
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_2_1, svPath1_2_1);

            // 1.3
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_3, svPath1_3);
            
            // 1.3.1
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_3_1, svPath1_3_1);
            
            // 1.3.2
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_3_2, svPath1_3_2);

            // 1.3.3
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_3_3, svPath1_3_3);
            
            // 1.3.4
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_3_4, svPath1_3_4);
            
            // 1.4.2
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_4_2, svPath1_4_2);
            
            // 1.5.0
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_5_0, svPath1_5_0);

            // 1.5.1
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_5_1, svPath1_5_1);

            //{{
            // ADD_NEW_VERSION_HERE
            // 1.6.0
            // nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_6_0, svPath1_6_0);
            //}}            
            
            if ( StrLength( svCurrentPath ) > 0) then
                szNewPath = svCurrentPath + ";" + svPathToAdd;
            else
                szNewPath = svPathToAdd;
            endif;

            if ( nPosFirst < StrLength( svCurrentPath ) ) then
                StrSub( svBeginPath, svCurrentPath, 0, nPosFirst );
                StrSub( svEndPath, svCurrentPath, nPosFirst, StrLength( svCurrentPath ) );
                szNewPath = svBeginPath + svPathToAdd + ";" + svEndPath;
            endif;

            Disable(LOGGING);
            nResult = RegDBSetKeyValueEx(WIN_ME_KEY, WIN_ME_PATH, nvType, szNewPath, -1);            
            Enable(LOGGING);
            
            if ( nResult < 0 ) then
                return FALSE; // failure                
            endif;
        else
            // already in path
            return FALSE; // failure
        endif;
    endif;
    
    // Flush the registry to all applications. 
    szEnv = "Environment";
    pEnv = &szEnv;
    SendMessage(HWND_BROADCAST, WM_SETTINGCHANGE, 0, pEnv);
    return TRUE; // success    
end;

//////////////////////////////////////////////////////////////////////////////
//
//  Function: AddNTPath
//
//  Purpose: Add given path to %PATH% on NT
//
///////////////////////////////////////////////////////////////////////////////

function AddNTPath(szPathToAdd)
    string szKey;           //
    string szIgnore;        // ignored
    string svCurrentPath;   //
    number nvSize;          //
    number nResult;         //
    number nvType;          // registry key type
    string szNewPath;       //
    string szEnv;           //
    pointer pEnv;           //
    string svPathToAdd;     //
    number nPosFirst;
    number nPos;
    string svBeginPath;
    string svEndPath;
    BOOL bFoundRC1;         // RC1
    string svPathRC1;       // RC1
    BOOL bFoundRC2;         // RC2
    string svPathRC2;       // RC2
    BOOL bFoundRC3;         // RC3
    string svPathRC3;       // RC3
    BOOL bFound1_0;         // 1.0
    string svPath1_0;       // 1.0
    BOOL bFound1_1;         // 1.1
    string svPath1_1;       // 1.1
    BOOL bFound1_2;         // 1.2
    string svPath1_2;       // 1.2
    BOOL bFound1_2_1;       // 1.2.1
    string svPath1_2_1;     // 1.2.1
    BOOL bFound1_3;         // 1.3
    string svPath1_3;       // 1.3
    BOOL bFound1_3_1;       // 1.3.1
    string svPath1_3_1;     // 1.3.1
    BOOL bFound1_3_2;       // 1.3.2
    string svPath1_3_2;     // 1.3.2
    BOOL bFound1_3_3;       // 1.3.3
    string svPath1_3_3;     // 1.3.3
    BOOL bFound1_3_4;       // 1.3.4
    string svPath1_3_4;     // 1.3.4
    BOOL bFound1_4_2;       // 1.4.2
    string svPath1_4_2;     // 1.4.2
    BOOL bFound1_5_0;       // 1.5.0
    string svPath1_5_0;     // 1.5.0
    BOOL bFound1_5_1;       // 1.5.1
    string svPath1_5_1;     // 1.5.1
    //{{
    // ADD_NEW_VERSION_HERE
    // BOOL bFound1_6_0;       // 1.6.0
    // string svPath1_6_0;     // 1.6.0
    //}}
begin
    if (!SYSINFO.WINNT.bWinNT) then
        // wrong OS
        return FALSE; // failure
    endif;

    //
    // check for previous versions
    //

    // check for RC1
    bFoundRC1 = CheckForPreviousGUID(@GUID_RC1, svPathRC1);

    // check for RC2
    bFoundRC2 = CheckForPreviousGUID(@GUID_RC2, svPathRC2);

    // check for RC3
    bFoundRC3 = CheckForPreviousGUID(@GUID_RC3, svPathRC3);

    // check for 1.0
    bFound1_0 = CheckForPreviousGUID(@GUID_1_0, svPath1_0);	
	
    // check for 1.1
    bFound1_1 = CheckForPreviousGUID(@GUID_1_1, svPath1_1);	

    // check for 1.2
    bFound1_2 = CheckForPreviousGUID(@GUID_1_2, svPath1_2);	

    // check for 1.2.1
    bFound1_2_1 = CheckForPreviousGUID(@GUID_1_2_1, svPath1_2_1);	
    	
    // check for 1.3
    bFound1_3 = CheckForPreviousGUID(@GUID_1_3, svPath1_3);	
    
    // check for 1.3.1
    bFound1_3_1 = CheckForPreviousGUID(@GUID_1_3_1, svPath1_3_1);

    // check for 1.3.2
    bFound1_3_2 = CheckForPreviousGUID(@GUID_1_3_2, svPath1_3_2);
    
    // check for 1.3.3
    bFound1_3_3 = CheckForPreviousGUID(@GUID_1_3_3, svPath1_3_3);
    
    // check for 1.3.4
    bFound1_3_4 = CheckForPreviousGUID(@GUID_1_3_4, svPath1_3_4);

    // check for 1.4.2
    bFound1_4_2 = CheckForPreviousGUID(@GUID_1_4_2, svPath1_4_2);

    // check for 1.5.0
    bFound1_5_0 = CheckForPreviousGUID(@GUID_1_5_0, svPath1_5_0);

    // check for 1.5.1
    bFound1_5_1 = CheckForPreviousGUID(@GUID_1_5_1, svPath1_5_1);

    //{{
    // ADD_NEW_VERSION_HERE
    // check for 1.6.0
    // bFound1_6_0 = CheckForPreviousGUID(@GUID_1_6_0, svPath1_6_0);
    //}}	

    svPathToAdd = szPathToAdd;
    if (LongPathToShortPath(svPathToAdd) < 0) then
        // bad path
        return FALSE; // failure
    endif;

    if (SYSINFO.WINNT.bWinNT) then 
        if ( Is(USER_ADMINISTRATOR, szIgnore) ) then
            szKey = ALL_USER_KEY;
            if (RegDBSetDefaultRoot( HKEY_LOCAL_MACHINE ) < 0) then
                // can't set root
                return FALSE; // failure
            endif;
        else
            szKey = CURRENT_USER_KEY;
            if (RegDBSetDefaultRoot( HKEY_CURRENT_USER ) < 0) then
                // can't set root
                return FALSE; // failure
            endif;
        endif;
    endif;

    // check to see if szPathToAdd is already in path
    nResult = RegDBGetKeyValueEx( szKey, WIN_NT_PATH, nvType, svCurrentPath, nvSize );

    if ( nResult < 0 ) then
        if (Is( USER_ADMINISTRATOR, szIgnore ) ) then
            // Path not found
            return FALSE; // failure
        else
            // NOTE: If not USER_ADMINISTRATOR path may not exist for current user
            Disable( LOGGING );
            nResult = RegDBSetKeyValueEx( szKey, WIN_NT_PATH, REGDB_STRING_EXPAND, svPathToAdd, -1 );
            Enable( LOGGING );
            if ( nResult < 0 ) then
                // Unable to set
                return FALSE; // failure
            endif;
        endif;
    else
        if ( StrFind( svCurrentPath, svPathToAdd ) < 0 ) then
            // not found add it to path

            // check if previous versions are in path
            nPosFirst = StrLength( svCurrentPath ); 

            // RC1
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFoundRC1, svPathRC1);

            // RC2
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFoundRC2, svPathRC2);

            // RC3
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFoundRC3, svPathRC3);

            // 1.0
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_0, svPath1_0);

            // 1.1
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_1, svPath1_1);

            // 1.2
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_2, svPath1_2);

            // 1.2.1
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_2_1, svPath1_2_1);

            // 1.3
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_3, svPath1_3);

            // 1.3.1
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_3_1, svPath1_3_1);
            
            // 1.3.2
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_3_2, svPath1_3_2);

            // 1.3.3
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_3_3, svPath1_3_3);
            
            // 1.3.4
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_3_4, svPath1_3_4);

            // 1.4.2
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_4_2, svPath1_4_2);
            
            // 1.5.0
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_5_0, svPath1_5_0);

            // 1.5.1
            nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_5_1, svPath1_5_1);
            
            //{{
            // ADD_NEW_VERSION_HERE
            // 1.6.0
            // nPosFirst = FindFirstPosition(svCurrentPath, nPosFirst, bFound1_6_0, svPath1_6_0);
            //}}
            
            if ( StrLength( svCurrentPath ) > 0) then
                szNewPath = svCurrentPath + ";" + svPathToAdd;
            else
                szNewPath = svPathToAdd;
            endif;

            if ( nPosFirst < StrLength( svCurrentPath ) ) then
                StrSub( svBeginPath, svCurrentPath, 0, nPosFirst );
                StrSub( svEndPath, svCurrentPath, nPosFirst, StrLength( svCurrentPath ) );
                szNewPath = svBeginPath + svPathToAdd + ";" + svEndPath;
            endif;

            Disable( LOGGING );
            nResult = RegDBSetKeyValueEx( szKey, WIN_NT_PATH, REGDB_STRING_EXPAND, szNewPath, -1 );
            Enable( LOGGING );

            if ( nResult < 0 ) then
                // Unable to set
                return FALSE; // failure
            endif;
        else
            // already in path
            return FALSE;
        endif;
    endif;

    // Flush the registry to all applications. 
    szEnv = "Environment";
    pEnv = &szEnv;
    SendMessage(HWND_BROADCAST, WM_SETTINGCHANGE, 0, pEnv);            
    return TRUE; // success
end;

//////////////////////////////////////////////////////////////////////////////
//
//  Function: AddPath
//
//  Purpose: Adds given path regardless of OS
//
///////////////////////////////////////////////////////////////////////////////

function AddPath(szPathToAdd)
    BOOL bPathModified;
begin
    // modify path if nec
    // NOTE g_bModifyPath = FALSE when MAINTENANCE = TRUE 
    if (SYSINFO.WIN9X.bWinMe) then            
        bPathModified = AddMEPath(szPathToAdd);
        if (bPathModified) then
            // force reboot
            BATCH_INSTALL = TRUE;
        endif;
    elseif (SYSINFO.WINNT.bWinNT) then            
        bPathModified = AddNTPath(szPathToAdd);
        // reboot not nec
    else
        bPathModified = AddAutoExecPath(szPathToAdd);
        if (bPathModified) then
            // force reboot
            BATCH_INSTALL = TRUE;
        endif;
    endif;
        
    return bPathModified;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  Function: BackupAutoexec
//
//  Purpose: Copies current autoexec.bat to autoexec.xxx
//           where xxx is in the range 001 to 999
//
///////////////////////////////////////////////////////////////////////////////

function BackupAutoexec()
    STRING svFile;
    STRING svBatchFile, svDir, svDisk;
    STRING szPath;
    STRING svResult;
    int i;
begin
    BatchGetFileName(svBatchFile);
    ParsePath(svDisk, svBatchFile, DISK);
    ParsePath(svDir, svBatchFile, DIRECTORY);

    szPath = svDisk ^ svDir;

    i = 1;
    Sprintf(svFile, "autoexec.%03i", i);
    while ( !( FindFile(szPath, svFile, svResult) < 0 ) )
        i++;
        Sprintf(svFile, "autoexec.%03i", i);
    endwhile;
          
    // Don't uninstall the backup file    
    Disable(LOGGING);
    VarSave(SRCTARGETDIR);
    // If the next line is excluded the status will jump to 100% as soon as autoexec.bat is copied
    StatusUpdate(FALSE, 0);
    SRCDIR = szPath;
    TARGETDIR = szPath;
    CopyFile("autoexec.bat", svFile);
    StatusUpdate(TRUE, 100);
    VarRestore(SRCTARGETDIR);
    Enable(LOGGING);
    
end;

//////////////////////////////////////////////////////////////////////////////
//
//  Function: RemoveAutoExecPath
//
//  Purpose: Remove path added by AddAutoExecPath
//
///////////////////////////////////////////////////////////////////////////////

function RemoveAutoExecPath(szPathToRemove)
    string szNewPath;
    string svFileName;
    string svPathToRemove;
    number nvLineNumber;
    string svReturnLine;
begin
    svPathToRemove = szPathToRemove;
    if (LongPathToShortPath(svPathToRemove) < 0) then
        // Bad Path
        return FALSE; // failure
    endif;    

    szNewPath = "SET PATH=%PATH%;" + svPathToRemove; 
    
    // Get the name of the bootup batch file.
    if (BatchGetFileName(svFileName) < 0) then
        // No autoexec.bat ???
        return FALSE; // failure
    endif;
    
    // REM Line immediately below added by ...
    if (FileGrep(svFileName, REM_BATCH, svReturnLine, nvLineNumber, RESTART) = 0) then
        if (StrCompare(svReturnLine, REM_BATCH) = 0) then
            FileDeleteLine(svFileName, nvLineNumber, nvLineNumber);
        else
            // string doesn't match
        endif;
    endif;
    
    // SET PATH=%PATH%; ...
    if (FileGrep(svFileName, szNewPath, svReturnLine, nvLineNumber, RESTART) = 0) then
        if (StrCompare(svReturnLine, szNewPath) = 0) then
            FileDeleteLine(svFileName, nvLineNumber, nvLineNumber);
        else
            // string doesn't match
        endif;
    endif;
    
    return TRUE; // success
end;

//////////////////////////////////////////////////////////////////////////////
//
//  Function: RemoveMEPath
//
//  Purpose: Remove path added by AddMEPath
//
//  Note: szPathToRemove must exist prior to call therefore call from
//        _UnInstalling rather than _UnInstalled
//
///////////////////////////////////////////////////////////////////////////////

function RemoveMEPath(szPathToRemove)
    string svPathToRemove;  //
    number nResult;         //
    number nvType;          // registry key type
    string svCurrentPath;   //
    number nvSize;          //
    number nPos;            //
    string svBeginPath;     //
    string svEndPath;       //
    string szNewPath;       //
    string szEnv;           //
    pointer pEnv;           //
begin    
    
    if (!SYSINFO.WIN9X.bWinMe) then
        // bad os
        return FALSE; // failure
    endif;
    
    // NOTE: svPathToRemove must exist before calling LongPathToShortPath
    svPathToRemove = szPathToRemove;
    if (LongPathToShortPath(svPathToRemove) < 0) then
        // bad path
        return FALSE; // failure    
    endif;    
    
    // set reg root
    if (RegDBSetDefaultRoot( HKEY_LOCAL_MACHINE ) < 0) then
        // can't set root
        return FALSE; // failure
    endif;    
    
    // check to see if szPathToRemove is in path
    nResult = RegDBGetKeyValueEx( WIN_ME_KEY, WIN_ME_PATH, nvType, svCurrentPath, nvSize );    
    
    if ( nResult < 0 ) then
        // WIN_ME_PATH key not found        
        return FALSE;
    else
        nPos = StrFind(svCurrentPath, ";" + svPathToRemove);
        if (nPos < 0) then
            nPos = StrFind(svCurrentPath, svPathToRemove);
        else
            svPathToRemove = ";" + svPathToRemove;            
        endif;
        if (nPos < 0) then
            // svPathToRemove not found
            return FALSE;        
        else
            // found now remove it
            StrSub( svBeginPath, svCurrentPath, 0, nPos );
            // in case something modified path since Setup
            StrSub( svEndPath, svCurrentPath, nPos + StrLength( svPathToRemove ), StrLength( svCurrentPath ) );
            
            szNewPath = svBeginPath + svEndPath;
            
            Disable(LOGGING);
            nResult = RegDBSetKeyValueEx( WIN_ME_KEY, WIN_ME_PATH, nvType, szNewPath, -1 );
            Enable(LOGGING);
            
            if ( nResult < 0 ) then
                // Unable to set WIN_ME_PATH key
                return FALSE;                
            endif;
        endif;
    endif;
    
    // Flush the registry to all applications. 
    szEnv = "Environment";
    pEnv = &szEnv;
    SendMessage(HWND_BROADCAST, WM_SETTINGCHANGE, 0, pEnv);
    return TRUE;    
end;

//////////////////////////////////////////////////////////////////////////////
//
//  Function: RemoveNTPath
//
//  Purpose: Remove path added by AddNTPath
//
//  Note: szPathToRemove must exist prior to call therefore call from
//        _UnInstalling rather than _UnInstalled
//
///////////////////////////////////////////////////////////////////////////////

function RemoveNTPath(szPathToRemove)
    string svPathToRemove;  //
    string szIgnore;        // ignored
    string szKey;           //
    number nResult;         //
    number nvType;          // registry key type
    string svCurrentPath;   //
    number nvSize;          //
    number nPos;            //
    string svBeginPath;     //
    string svEndPath;       //
    string szNewPath;       //
    string szEnv;           //
    pointer pEnv;           //
begin
    if (!SYSINFO.WINNT.bWinNT) then 
        // bad os
        return FALSE;
    endif;
    
    // NOTE: svPathToRemove must exist before calling LongPathToShortPath
    svPathToRemove = szPathToRemove;
    if (LongPathToShortPath( svPathToRemove ) < 0) then
        // bad path
        return FALSE; // failure
    endif;    
   
    // set reg root
    if (Is( USER_ADMINISTRATOR, szIgnore )) then
        szKey = ALL_USER_KEY;
        if (RegDBSetDefaultRoot( HKEY_LOCAL_MACHINE ) < 0) then
            // can't set root
            return FALSE; // failure
        endif;
    else
        szKey = CURRENT_USER_KEY;
        if (RegDBSetDefaultRoot( HKEY_CURRENT_USER ) < 0) then
            // can't set root
            return FALSE; // failure
        endif;
    endif;
    
    // check to see if svPathToRemove is in path
    nResult = RegDBGetKeyValueEx(szKey, WIN_NT_PATH, nvType, svCurrentPath, nvSize);    
    
    if ( nResult < 0 ) then
        // WIN_NT_PATH key not found
        return FALSE;
    else
        nPos = StrFind(svCurrentPath, ";" + svPathToRemove);
        if (nPos < 0) then
            nPos = StrFind(svCurrentPath, svPathToRemove);
        else
            svPathToRemove = ";" + svPathToRemove;            
        endif;
        if (nPos < 0) then
            // svPathToRemove not found
            return FALSE;        
        else
            // found now remove it
            StrSub( svBeginPath, svCurrentPath, 0, nPos );
            // in case something modified path since Setup
            StrSub( svEndPath, svCurrentPath, nPos + StrLength( svPathToRemove ), StrLength( svCurrentPath ) );
            
            szNewPath = svBeginPath + svEndPath;
            
            if (StrLength(szNewPath) = 0) then
                Disable(LOGGING);
                nResult = RegDBDeleteValue(szKey, WIN_NT_PATH);                
                Enable(LOGGING);
            else
                Disable(LOGGING);
                nResult = RegDBSetKeyValueEx( szKey, WIN_NT_PATH, REGDB_STRING_EXPAND, szNewPath, -1 );
                Enable(LOGGING);                
            endif;
            
            
            if ( nResult < 0 ) then
                // Unable to set WIN_NT_PATH key
                return FALSE;                
            endif;
        endif;
    endif;
        
    // Flush the registry to all applications. 
    szEnv = "Environment";
    pEnv = &szEnv;
    SendMessage( HWND_BROADCAST, WM_SETTINGCHANGE, 0, pEnv );            
    return TRUE;    
end;

//////////////////////////////////////////////////////////////////////////////
//
//  Function: RemovePath
//
//  Purpose: Remove path added by AddPath
//
//  Note: szPathToRemove must exist prior to call therefore call from
//        _UnInstalling rather than _UnInstalled
//
///////////////////////////////////////////////////////////////////////////////

function RemovePath(szPathToRemove)
    BOOL bPathRemoved;
begin
    if (SYSINFO.WIN9X.bWinMe) then
        bPathRemoved = RemoveMEPath(szPathToRemove);
        if (bPathRemoved) then
            // force reboot
            BATCH_INSTALL = TRUE;            
        endif;
    elseif (SYSINFO.WINNT.bWinNT) then
        bPathRemoved = RemoveNTPath(szPathToRemove);
    else
        bPathRemoved = RemoveAutoExecPath(szPathToRemove);
        if (bPathRemoved) then
            // force reboot
            BATCH_INSTALL = TRUE;            
        endif;
    endif;
    return bPathRemoved;
end;

//////////////////////////////////////////////////////////////////////////////
//
//  Function: CheckForPreviousGUID
//
//  Purpose: check to see if a previous installation is already installed and
//  if so return the installation path in svPath in short form (8.3) 
//
///////////////////////////////////////////////////////////////////////////////
function CheckForPreviousGUID(szGUID, svPath)
    BOOL bFound;
    string szKey;
    number nvType;
    number nvSize;
    number nResult;
    string svResult;
begin
	bFound = FALSE;
    if (RegDBSetDefaultRoot( HKEY_LOCAL_MACHINE ) >= 0) then
        szKey = HKEY_UNINSTALL ^ "{" + szGUID + "}";
        nResult = RegDBGetKeyValueEx( szKey, INSTALLLOCATION, nvType, svPath, nvSize );
        if ( nResult == 0 ) then
            if (LongPathToShortPath(svPath) == 0) then
                bFound = TRUE;
            endif;
        endif;
    endif;
    //{{
    // Note: HACK for rc1 only -- added InstallLocation starting with rc2
    // see OnMoved and OnMoving 
    if (StrCompare(szGUID, @GUID_RC1) == 0) then
	    if (g_bRC1Hack) then
	    	svPath = g_svRC1HackPath;
            bFound = TRUE;
	    endif;
    endif;    
    //}}
    //}}
	return bFound;
end;

//////////////////////////////////////////////////////////////////////////////
//
//  Function: FindFirstPosition
//
//  Purpose: check if szPath is in szCurrentPath and if so return the
//  position if earlier than nvPosFirst
//
//  Note: szPath should be short form (8.3) => call LongPathToShortPath first
//
///////////////////////////////////////////////////////////////////////////////
function FindFirstPosition(szCurrentPath, nvPosFirst, bFound, szPath)
    number nPos;
begin
    if ( bFound ) then
        nPos = StrFind(szCurrentPath, szPath);
        if (nPos > 0) then
            if (nPos < nvPosFirst) then
                nvPosFirst = nPos;
            endif;
        endif;
    endif;
	return nvPosFirst;
end;
